<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kanri&#39;s blog</title>
  
  
  <link href="https://blog.kanri.top/atom.xml" rel="self"/>
  
  <link href="https://blog.kanri.top/"/>
  <updated>2022-02-14T11:29:52.529Z</updated>
  <id>https://blog.kanri.top/</id>
  
  <author>
    <name>鈴木観理</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LRU</title>
    <link href="https://blog.kanri.top/2022/02/12/LRU/"/>
    <id>https://blog.kanri.top/2022/02/12/LRU/</id>
    <published>2022-02-12T09:54:51.000Z</published>
    <updated>2022-02-14T11:29:52.529Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个用 双向链表与哈希表实现的 <code>LRU</code> (Least Recently Used) 缓存淘汰算法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;container/list&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</span><br><span class="line">Key <span class="keyword">string</span></span><br><span class="line">Val <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LRU <span class="keyword">struct</span> &#123;</span><br><span class="line">Cap  <span class="keyword">int</span></span><br><span class="line">List *list.List</span><br><span class="line">Hash <span class="keyword">map</span>[<span class="keyword">string</span>]*list.Element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLRU</span><span class="params">(<span class="built_in">cap</span> <span class="keyword">int</span>)</span> *<span class="title">LRU</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;LRU&#123;Cap: <span class="built_in">cap</span>, List: list.New(), Hash: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*list.Element)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lru *LRU)</span> <span class="title">Put</span><span class="params">(key <span class="keyword">string</span>, val <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> e, ok := lru.Hash[key]; ok &#123;</span><br><span class="line">lru.List.Remove(e)</span><br><span class="line">&#125;</span><br><span class="line">e := lru.List.PushBack(&amp;Data&#123;Key: key, Val: val&#125;)</span><br><span class="line">lru.Hash[key] = e</span><br><span class="line"><span class="keyword">if</span> lru.List.Len() &gt; lru.Cap &#123;</span><br><span class="line">f := lru.List.Front()</span><br><span class="line">lru.List.Remove(f)</span><br><span class="line"><span class="built_in">delete</span>(lru.Hash, f.Value.(*Data).Key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lru *LRU)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(val <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> e, ok := lru.Hash[key]; ok &#123;</span><br><span class="line">        lru.List.MoveToBack(e)</span><br><span class="line"><span class="keyword">return</span> e.Value.(*Data).Val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个用 双向链表与哈希表实现的 &lt;code&gt;LRU&lt;/code&gt; (Least Recently Used) 缓存淘汰算法&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://blog.kanri.top/tags/Golang/"/>
    
    <category term="LRU" scheme="https://blog.kanri.top/tags/LRU/"/>
    
  </entry>
  
  <entry>
    <title>Go HTTP 标准库 使用代理</title>
    <link href="https://blog.kanri.top/2022/02/03/Go-HTTP-%E6%A0%87%E5%87%86%E5%BA%93-%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
    <id>https://blog.kanri.top/2022/02/03/Go-HTTP-%E6%A0%87%E5%87%86%E5%BA%93-%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</id>
    <published>2022-02-03T02:52:19.000Z</published>
    <updated>2022-02-03T06:08:55.247Z</updated>
    
    <content type="html"><![CDATA[<p>Go HTTP 标准库不走系统代理，因此我们通过 <code>Fiddler</code> 抓包的时候，是抓不到标准库发送的请求的。因此我们需要设置其代理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fiddler</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">proxy, err := url.Parse(<span class="string">&quot;http://127.0.0.1:8866&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">client := &amp;http.Client&#123;</span><br><span class="line">Transport: &amp;http.Transport&#123;</span><br><span class="line">Proxy: http.ProxyURL(proxy),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://www.baidu.com&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>fiddler()</code> 我们可以在 <code>Fiddler</code> 里面抓到访问 <code>https://www.baidu.com</code> 的请求。其中 <code>8866</code> 为 <code>Fiddler</code> 的监听端口，可以通过 <code>Fiddler</code> 设置。</p><p>顺带一提，我们可以通过 <code>import &quot;golang.org/x/sys/windows/registry&quot;</code> 获取系统代理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">key, err := registry.OpenKey(</span><br><span class="line">registry.CURRENT_USER,</span><br><span class="line"><span class="string">`SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings`</span>,</span><br><span class="line">registry.QUERY_VALUE)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">val, _, err := key.GetStringValue(<span class="string">&quot;ProxyServer&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Go HTTP 标准库不走系统代理，因此我们通过 &lt;code&gt;Fiddler&lt;/code&gt; 抓包的时候，是抓不到标准库发送的请求的。因此我们需要设置其代理&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://blog.kanri.top/tags/Golang/"/>
    
    <category term="HTTP" scheme="https://blog.kanri.top/tags/HTTP/"/>
    
    <category term="Proxy" scheme="https://blog.kanri.top/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Go HTTP 标准库 多线程下载</title>
    <link href="https://blog.kanri.top/2022/01/30/Go-HTTP-%E6%A0%87%E5%87%86%E5%BA%93-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/"/>
    <id>https://blog.kanri.top/2022/01/30/Go-HTTP-%E6%A0%87%E5%87%86%E5%BA%93-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/</id>
    <published>2022-01-30T11:12:55.000Z</published>
    <updated>2022-02-02T10:14:33.222Z</updated>
    
    <content type="html"><![CDATA[<p>本文以 <code>https://i.pximg.net/img-master/img/2022/01/30/00/50/14/95863886_p0_master1200.jpg</code> 的下载作为例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetHeader</span><span class="params">(image <span class="keyword">string</span>)</span> <span class="params">(http.Header, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// P站特殊客户端</span></span><br><span class="line">client := &amp;http.Client&#123;</span><br><span class="line"><span class="comment">// 解决中国大陆无法访问的问题</span></span><br><span class="line">Transport: &amp;http.Transport&#123;</span><br><span class="line"><span class="comment">// 更改 dns</span></span><br><span class="line">Dial: <span class="function"><span class="keyword">func</span><span class="params">(network, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;210.140.92.142:443&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 隐藏 sni 标志</span></span><br><span class="line">TLSClientConfig: &amp;tls.Config&#123;</span><br><span class="line">ServerName:         <span class="string">&quot;-&quot;</span>,</span><br><span class="line">InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求 Header</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;HEAD&quot;</span>, image, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Host&quot;</span>, <span class="string">&quot;i.pximg.net&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Referer&quot;</span>, <span class="string">&quot;https://www.pixiv.net/&quot;</span>)</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">return</span> resp.Header, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>GetHeader(&quot;https://i.pximg.net/img-master/img/2022/01/30/00/50/14/95863886_p0_master1200.jpg&quot;)</code> ，我们将返回的 <code>Header</code> 打印得到</p><figure class="highlight http"><figcaption><span>HEADER</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=31536000</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Sun, 29 Jan 2023 15:50:15 GMT</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Sat, 29 Jan 2022 15:50:14 GMT</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>image/jpeg</span><br><span class="line"><span class="attribute">Age</span><span class="punctuation">: </span>237119</span><br><span class="line"><span class="attribute">Via</span><span class="punctuation">: </span>http/1.1 f001 (second)</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 01 Feb 2022 09:45:03 GMT</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1093164</span><br></pre></td></tr></table></figure><p>其中， <code>Content-Length: 1093164</code> 为该资源的大小， <code>Accept-Ranges: bytes</code> 表示该资源是可断点续传的，因而我们可以实现并发下载资源。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DownSlice</span><span class="params">(image <span class="keyword">string</span>, start, end <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// P站特殊客户端</span></span><br><span class="line">client := &amp;http.Client&#123;</span><br><span class="line"><span class="comment">// 解决中国大陆无法访问的问题</span></span><br><span class="line">Transport: &amp;http.Transport&#123;</span><br><span class="line"><span class="comment">// 更改 dns</span></span><br><span class="line">Dial: <span class="function"><span class="keyword">func</span><span class="params">(network, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;210.140.92.142:443&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 隐藏 sni 标志</span></span><br><span class="line">TLSClientConfig: &amp;tls.Config&#123;</span><br><span class="line">ServerName:         <span class="string">&quot;-&quot;</span>,</span><br><span class="line">InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求 资源</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, image, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Host&quot;</span>, <span class="string">&quot;i.pximg.net&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Referer&quot;</span>, <span class="string">&quot;https://www.pixiv.net/&quot;</span>)</span><br><span class="line"><span class="comment">// 设置下载范围</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Range&quot;</span>, fmt.Sprintf(<span class="string">&quot;bytes=%d-%d&quot;</span>, start, end<span class="number">-1</span>))</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">b, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>DownSlice(&quot;https://i.pximg.net/img-master/img/2022/01/30/00/50/14/95863886_p0_master1200.jpg&quot;, 0, 1024)</code> ，即可下载资源的 0-1024 的部分，知道原理后我们利用协程即可对资源进行并发下载。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文以 &lt;code&gt;https://i.pximg.net/img-master/img/2022/01/30/00/50/14/95863886_p0_master1200.jpg&lt;/code&gt; 的下载作为例子&lt;/p&gt;
&lt;figure class=&quot;highlight g</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://blog.kanri.top/tags/Golang/"/>
    
    <category term="HTTP" scheme="https://blog.kanri.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>DB2 docker 安装</title>
    <link href="https://blog.kanri.top/2021/09/22/DB2-docker-%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.kanri.top/2021/09/22/DB2-docker-%E5%AE%89%E8%A3%85/</id>
    <published>2021-09-22T02:05:34.000Z</published>
    <updated>2022-01-11T08:28:57.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://www.ibm.com/support/producthub/db2/docs/content/SSEPGG_11.5.0/com.ibm.db2.luw.db2u_openshift.doc/doc/t_install_db2CE_linux_img.html">Installing the Db2 Community Edition Docker image on Linux systems</a></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>需要安装并掌握 docker 的使用方法</li></ul><h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><h4 id="拉取-docker-镜像"><a href="#拉取-docker-镜像" class="headerlink" title="拉取 docker 镜像"></a>拉取 docker 镜像</h4><ol><li>拉取官方最新版本的 DB2 docker 镜像<br><code>docker pull ibmcom/db2</code></li><li>查看已经拉取的 docker 镜像<br><code>docker image ls</code><br>可以看到返回结果<br><code>ibmcom/db2            latest    a6a5ee354fb1   2 months ago   2.95GB</code><h4 id="进入-docker-容器"><a href="#进入-docker-容器" class="headerlink" title="进入 docker 容器"></a>进入 docker 容器</h4></li><li>进入Docker容器：<br><code>docker run -d -p 50000:50000 --name db2 --privileged=true -e DB2INST1_PASSWORD=123456 -e DBNAME=testdb -e LICENSE=accept ibmcom/db2</code></li></ol><ul><li>-d: 表示在后台启动容器</li><li>-p 50000:50000: 容器内部的 50000 端口映射到主机的 50000 端口</li><li>–name db2: 将容器命名 db2</li><li>–privileged=true: 使得容器内的 root 拥有真正的 root 权限</li><li>-e DB2INST1_PASSWORD=123456：设置内置实例用户 db2inst1 的密码为 123456</li><li>-e DBNAME=testdb：容器启动时自动创建一个名为 testdb 的数据库，如果不指定该参数则不创建数据库</li><li>-e LICENSE=accept：接受协议</li></ul><ol start="2"><li>查看已有的 docker 容器<br><code>docker ps</code><br>可以看到返回结果<br><code>d16a04516597   ibmcom/db2            &quot;/var/db2_setup/lib/…&quot;   6 days ago   Up 2 hours   22/tcp, 55000/tcp, 60006-60007/tcp, 0.0.0.0:50000-&gt;50000/tcp   db2</code></li><li>启动 db2 容器<br><code>docker start db2</code></li><li>进入 db2 容器<br><code>docker attach db2</code><h4 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h4></li><li>切换到 db2iadm1 组的用户 db2inst1<br><code>su db2inst1</code></li><li>查看 DB2 版本<br><code>db2licm -l</code><br>可以看到返回结果<br><code>Product name:                     &quot;DB2 Community Edition&quot;</code><br><code>License type:                     &quot;Community&quot;</code><br><code>Expiry date:                      &quot;Permanent&quot;</code><br><code>Product identifier:               &quot;db2dec&quot;</code><br><code>Version information:              &quot;11.5&quot;</code><br><code>Max amount of memory (GB):        &quot;16&quot;</code><br><code>Max number of cores:              &quot;4&quot;</code><br><code>Max amount of table space (GB):   &quot;100&quot;</code></li><li>查看实例信息<br><code>db2level</code><br>可以看到返回结果<br><code>DB21085I  This instance or install (instance name, where applicable: &quot;testdb&quot;) uses &quot;64&quot; bits and DB2 code release &quot;SQL11056&quot; with level identifier &quot;0607010F&quot;. Informational tokens are &quot;DB2 v11.5.6.0&quot;, &quot;s2106111000&quot;, &quot;DYN2106111000AMD64&quot;, and Fix Pack &quot;0&quot;. Product is installed at &quot;/opt/ibm/db2/V11.5&quot;.</code></li><li>查看该系统下的实例列表<br><code>db2ilist</code></li><li>查看该用户下的实例列表<br><code>db2 list db directory</code><h4 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h4></li><li>用实例对应的用户，启动数据库<br><code>db2start</code><br>可以看到返回结果<br><code>SQL1063N  DB2START processing was successful.</code></li><li>使用本地连接数据库<br><code>db2 connect to testdb user db2inst1 using 123456</code><br>可以看到返回结果<br><code>Database Connection Information</code><br><code>Database server        = DB2/LINUXX8664 11.5.6.0</code><br><code>SQL authorization ID   = DB2INST1</code><br><code>Local database alias   = TESTDB</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/support/producthub/db2/docs/conte</summary>
      
    
    
    
    
    <category term="DB2" scheme="https://blog.kanri.top/tags/DB2/"/>
    
    <category term="docker" scheme="https://blog.kanri.top/tags/docker/"/>
    
    <category term="database" scheme="https://blog.kanri.top/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>luasocket 安装</title>
    <link href="https://blog.kanri.top/2021/08/16/luasocket-%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.kanri.top/2021/08/16/luasocket-%E5%AE%89%E8%A3%85/</id>
    <published>2021-08-16T09:04:22.000Z</published>
    <updated>2022-01-11T08:28:57.531Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Lua(version 3.3.6)</li><li>LuaRocks(version 3.7.0)</li></ul><p>本篇博文主要详细讲述 luasocket 安装过程中踩到过的坑。</p><h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><p><code>CMD</code> 内输入 <code>luarocks install luasocket</code></p><p>以下为安装过程中遇到的几个坑，记录一下</p><h4 id="网络波动"><a href="#网络波动" class="headerlink" title="网络波动"></a>网络波动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Warning: Failed searching manifest: Failed downloading https://luarocks.org/manifest-5.3 - host or service not provided, or not known</span><br><span class="line">Warning: Failed searching manifest: Failed downloading https://raw.githubusercontent.com/rocks-moonscript-org/moonrocks-mirror/master/manifest-5.3 - host or service not provided, or not known</span><br><span class="line">Warning: Failed searching manifest: Failed downloading https://luafr.org/luarocks/manifest-5.3 - host or service not provided, or not known</span><br><span class="line">Warning: Failed searching manifest: Failed downloading http://luarocks.logiceditor.com/rocks/manifest-5.3 - host or service not provided, or not known</span><br><span class="line"></span><br><span class="line">Error: No results matching query were found for Lua 5.3.</span><br><span class="line">To check if it is available for other Lua versions, use --check-lua-versions.</span><br></pre></td></tr></table></figure><p>解决办法：<br>多试几次就好了，实在不行手动下载 <code>luasocket-3.0rc1-1.src.rock</code> ，并在 <code>luasocket-3.0rc1-1.src.rock</code> 目录下使用 <code>CMD</code> 命令 <code>luarocks install luasocket-3.0rc1-1.src.rock</code>。</p><h4 id="提示-mingw32-gcc-exe"><a href="#提示-mingw32-gcc-exe" class="headerlink" title="提示 mingw32-gcc.exe"></a>提示 mingw32-gcc.exe</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;mingw32-gcc&#x27; 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br></pre></td></tr></table></figure><p>解决办法：<br>在 GCC 环境中 <code>bin</code> 文件夹中，找到 <code>x86_64-w64-mingw32-gcc-9.2.0.exe</code>，复制一份并改名成 <code>mingw32-gcc.exe</code>。</p><h4 id="C-编译不通过"><a href="#C-编译不通过" class="headerlink" title="C 编译不通过"></a>C 编译不通过</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/luasocket.c: In function &#x27;global_skip&#x27;:</span><br><span class="line">src/luasocket.c:67:18: warning: implicit declaration of function &#x27;luaL_checkint&#x27;; did you mean &#x27;luaL_checkany&#x27;? [-Wimplicit-function-declaration]</span><br><span class="line">   67 |     int amount = luaL_checkint(L, 1);</span><br><span class="line">      |                  ^~~~~~~~~~~~~</span><br><span class="line">      |                  luaL_checkany</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li>在 <code>luasocket-3.0rc1-1.src.rock</code> 目录下使用 <code>CMD</code> 命令 <code>luarocks unpack luasocket-3.0rc1-1.src.rock</code> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-- luasocket-3.0rc1-1</span><br><span class="line">    |-- luasocket-3.0rc1-1</span><br><span class="line">        |-- src</span><br><span class="line">        |-- doc</span><br><span class="line">        |-- luasocket-3.0rc1-1.rockspec</span><br><span class="line">    |-- luasocket-3.0rc1-1.rockspec</span><br><span class="line">    |-- v3.0-rc1.zip</span><br></pre></td></tr></table></figure></li><li>增加 Lua 版本 3.3.6 兼容<br>用文本编辑器打开里层的 <code>luasocket-3.0rc1-1.rockspec</code> 文件，找到 <code>mingw32</code> 并修改成以下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mingw32 = &#123;</span><br><span class="line">    &quot;LUASOCKET_DEBUG&quot;,</span><br><span class="line">    &quot;LUASOCKET_INET_PTON&quot;,</span><br><span class="line">    &quot;LUA_COMPAT_5_2&quot;,</span><br><span class="line">    &quot;WINVER=0x0501&quot;,</span><br><span class="line">    &quot;LUASOCKET_API=__declspec(dllexport)&quot;,</span><br><span class="line">    &quot;MIME_API=__declspec(dllexport)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中新增的 <code>LUA_COMPAT_5_2</code> 为 Lua 5.3.6 向下兼容</li><li>安装<br>在里层 <code>luasocket-3.0rc1-1</code> 目录下使用 <code>CMD</code> 命令  <code>luarocks make luasocket-3.0rc1-1.rockspec</code></li></ol><h4 id="GCC-炸了"><a href="#GCC-炸了" class="headerlink" title="GCC 炸了"></a>GCC 炸了</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:/TDM-GCC-64/bin/../lib/gcc/x86_64-w64-mingw32/9.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible c:/windows/system32/ws2_32.dll when searching for -lws2_32</span><br><span class="line">C:/TDM-GCC-64/bin/../lib/gcc/x86_64-w64-mingw32/9.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible c:/windows/system32/msvcrt.dll when searching for -lmsvcrt</span><br><span class="line">C:/TDM-GCC-64/bin/../lib/gcc/x86_64-w64-mingw32/9.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible c:/windows/system32/advapi32.dll when searching for -ladvapi32</span><br><span class="line">C:/TDM-GCC-64/bin/../lib/gcc/x86_64-w64-mingw32/9.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible c:/windows/system32/shell32.dll when searching for -lshell32</span><br><span class="line">C:/TDM-GCC-64/bin/../lib/gcc/x86_64-w64-mingw32/9.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible c:/windows/system32/user32.dll when searching for -luser32</span><br><span class="line">C:/TDM-GCC-64/bin/../lib/gcc/x86_64-w64-mingw32/9.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible c:/windows/system32/kernel32.dll when searching for -lkernel32</span><br><span class="line">C:/TDM-GCC-64/bin/../lib/gcc/x86_64-w64-mingw32/9.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible c:/windows/system32/msvcrt.dll when searching for -lmsvcrt</span><br></pre></td></tr></table></figure><p>解决办法：<br>低版本的 GCC 无法完整编译 luasocket ，更换高版本的 GCC ，博主这里用的是 <code>x86_64-w64-mingw32-gcc-9.2.0.exe</code></p><h4 id="Lua-找不到安装的依赖"><a href="#Lua-找不到安装的依赖" class="headerlink" title="Lua 找不到安装的依赖"></a>Lua 找不到安装的依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Lua 5.3.6  Copyright (C) 1994-2020 Lua.org, PUC-Rio</span><br><span class="line">&gt; require(&quot;socket&quot;)</span><br><span class="line">stdin:1: module &#x27;socket&#x27; not found:</span><br><span class="line">        no field package.preload[&#x27;socket&#x27;]</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\lua\socket.lua&#x27;</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\lua\socket\init.lua&#x27;</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\socket.lua&#x27;</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\socket\init.lua&#x27;</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\..\share\lua\5.3\socket.lua&#x27;</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\..\share\lua\5.3\socket\init.lua&#x27;</span><br><span class="line">        no file &#x27;.\socket.lua&#x27;</span><br><span class="line">        no file &#x27;.\socket\init.lua&#x27;</span><br><span class="line">        no file &#x27;C:\Program Files (x86)\Lua\5.3.6\lua\socket.luac&#x27;</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\socket.dll&#x27;</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\..\lib\lua\5.3\socket.dll&#x27;</span><br><span class="line">        no file &#x27;E:\kanri program\Lua\bin\loadall.dll&#x27;</span><br><span class="line">        no file &#x27;.\socket.dll&#x27;</span><br><span class="line">stack traceback:</span><br><span class="line">        [C]: in function &#x27;require&#x27;</span><br><span class="line">        stdin:1: in main chunk</span><br><span class="line">        [C]: in ?</span><br></pre></td></tr></table></figure><p>解决办法：<br><code>CMD</code> 内输入 <code>luarocks path --bin</code> ，将路径添加到环境变量中<br>注意 <code>CMD</code> 内使用 <code>SET</code> 命令配置的环境变量只适用于当前 <code>CMD</code> 窗口</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Lua(version 3.3.6)&lt;/li&gt;
&lt;li&gt;LuaRocks(version 3.7.0)&lt;/li&gt;
&lt;/ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Lua" scheme="https://blog.kanri.top/tags/Lua/"/>
    
    <category term="LuaRocks" scheme="https://blog.kanri.top/tags/LuaRocks/"/>
    
    <category term="luasocket" scheme="https://blog.kanri.top/tags/luasocket/"/>
    
  </entry>
  
  <entry>
    <title>Lua LuaRocks 安装</title>
    <link href="https://blog.kanri.top/2021/08/13/Lua-LuaRocks-%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.kanri.top/2021/08/13/Lua-LuaRocks-%E5%AE%89%E8%A3%85/</id>
    <published>2021-08-13T02:31:07.000Z</published>
    <updated>2022-01-11T08:28:57.527Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于网上对安装过程陈述过于模糊，本篇博文主要详细讲述 LuaRocks(version 3.7.0) 搭配 Lua(version 3.3.6) ，在 Windows 环境下的安装。</p><h3 id="LuaRocks"><a href="#LuaRocks" class="headerlink" title="LuaRocks"></a>LuaRocks</h3><p>LuaRocks 是 Lua 的模组管理器。能很方便在 Unix 以及 Windows 下载以及安装 Lua 模组。</p><h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><h4 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h4><ul><li><code>TDM-GCC</code> 或 <code>Mingw64</code><br>如果没有需要自行安装</li></ul><h4 id="安装-Lua-version-3-3-6"><a href="#安装-Lua-version-3-3-6" class="headerlink" title="安装 Lua(version 3.3.6)"></a>安装 Lua(version 3.3.6)</h4><p>详见 <a href="http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies">http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies</a></p><ul><li>下载源码<br>进入 <a href="https://www.lua.org/">Lua 官网</a> 下载 Lua(version 3.3.6)，即文件 <code>lua-5.3.6.tar.gz</code> ，并解压<br>当前目录结构如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|-- lua-5.4.3</span><br><span class="line">    |-- lua-5.4.3</span><br><span class="line">        |-- src</span><br><span class="line">            |-- lua.c</span><br><span class="line">            |-- lua.h</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- doc</span><br><span class="line">            |-- readme.html</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- Makefile</span><br><span class="line">        |-- README</span><br></pre></td></tr></table></figure></li><li>创建 Windows Shell 脚本<br>新建文件 <code>build.cmd</code> ，放在与 Makefile 文件的父级目录同级的地方，内容如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:: ========================</span><br><span class="line">:: file build.cmd</span><br><span class="line">:: ========================</span><br><span class="line">setlocal</span><br><span class="line">:: you may change the following variable&#x27;s value</span><br><span class="line">:: to suit the downloaded version</span><br><span class="line">set lua_version=5.3.6</span><br><span class="line"></span><br><span class="line">set work_dir=%~dp0</span><br><span class="line">:: Removes trailing backslash</span><br><span class="line">:: to enhance readability in the following steps</span><br><span class="line">set work_dir=%work_dir:~0,-1%</span><br><span class="line">set lua_install_dir=%work_dir%\lua</span><br><span class="line">set compiler_bin_dir=%work_dir%\tdm-gcc\bin</span><br><span class="line">set lua_build_dir=%work_dir%\lua-%lua_version%</span><br><span class="line">set path=%compiler_bin_dir%;%path%</span><br><span class="line"></span><br><span class="line">cd /D %lua_build_dir%</span><br><span class="line">mingw32-make PLAT=mingw</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">echo **** COMPILATION TERMINATED ****</span><br><span class="line">echo.</span><br><span class="line">echo **** BUILDING BINARY DISTRIBUTION ****</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: create a clean &quot;binary&quot; installation</span><br><span class="line">mkdir %lua_install_dir%</span><br><span class="line">mkdir %lua_install_dir%\doc</span><br><span class="line">mkdir %lua_install_dir%\bin</span><br><span class="line">mkdir %lua_install_dir%\include</span><br><span class="line"></span><br><span class="line">copy %lua_build_dir%\doc\*.* %lua_install_dir%\doc\*.*</span><br><span class="line">copy %lua_build_dir%\src\*.exe %lua_install_dir%\bin\*.*</span><br><span class="line">copy %lua_build_dir%\src\*.dll %lua_install_dir%\bin\*.*</span><br><span class="line">copy %lua_build_dir%\src\luaconf.h %lua_install_dir%\include\*.*</span><br><span class="line">copy %lua_build_dir%\src\lua.h %lua_install_dir%\include\*.*</span><br><span class="line">copy %lua_build_dir%\src\lualib.h %lua_install_dir%\include\*.*</span><br><span class="line">copy %lua_build_dir%\src\lauxlib.h %lua_install_dir%\include\*.*</span><br><span class="line">copy %lua_build_dir%\src\lua.hpp %lua_install_dir%\include\*.*</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">echo **** BINARY DISTRIBUTION BUILT ****</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">%lua_install_dir%\bin\lua.exe -e&quot;print [[Hello!]];print[[Simple Lua test successful!!!]]&quot;</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>当前目录结构如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|-- lua-5.4.3</span><br><span class="line">    |-- lua-5.4.3</span><br><span class="line">        |-- src</span><br><span class="line">            |-- lua.c</span><br><span class="line">            |-- lua.h</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- doc</span><br><span class="line">            |-- readme.html</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- Makefile</span><br><span class="line">        |-- README</span><br><span class="line">    |-- build.cmd</span><br></pre></td></tr></table></figure></li><li>编译 Lua<br>运行 <code>build.cmd</code> ，待编译完成后，自动生成文件夹 <code>Lua</code> ，此文件夹便是整个 Lua 环境<br>当前目录结构如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">|-- lua-5.4.3</span><br><span class="line">    |-- lua-5.4.3</span><br><span class="line">        |-- src</span><br><span class="line">            |-- lua.c</span><br><span class="line">            |-- lua.h</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- doc</span><br><span class="line">            |-- readme.html</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- Makefile</span><br><span class="line">        |-- README</span><br><span class="line">    |-- lua</span><br><span class="line">        |-- bin</span><br><span class="line">            |-- lua.exe</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- doc</span><br><span class="line">            |-- readme.html</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- include</span><br><span class="line">            |-- lua.h</span><br><span class="line">            |-- ...</span><br><span class="line">    |-- build.cmd</span><br></pre></td></tr></table></figure></li><li>配置 Lua 环境变量<br>将上述生成的 <code>lua</code> 文件夹放到合适的位置，并添加环境变量<br>向 <code>PATH</code> 增加一项 绝对路径 + <code>lua-5.4.3\lua\bin</code></li><li>验证 Lua 环境<br>重新打开 <code>CMD</code> ，输入 <code>lua -v</code>，如果正确显示版本则安装成功。</li></ul><h4 id="安装-LuaRocks-version-3-7-0"><a href="#安装-LuaRocks-version-3-7-0" class="headerlink" title="安装 LuaRocks(version 3.7.0)"></a>安装 LuaRocks(version 3.7.0)</h4><ul><li>下载 LuaRocks 二进制文件<br><a href="http://luarocks.github.io/luarocks/releases/luarocks-3.7.0-windows-64.zip">下载 LuaRocks(version 3.7.0)</a>，并解压<br>其他版本：<a href="http://luarocks.github.io/luarocks/releases/">http://luarocks.github.io/luarocks/releases/</a></li><li>将 <code>luarocks.exe</code> 文件复制到 <code>lua-5.4.3\lua\bin</code> 文件夹中<br>当前目录结构如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">|-- lua-5.4.3</span><br><span class="line">    |-- lua-5.4.3</span><br><span class="line">        |-- src</span><br><span class="line">            |-- lua.c</span><br><span class="line">            |-- lua.h</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- doc</span><br><span class="line">            |-- readme.html</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- Makefile</span><br><span class="line">        |-- README</span><br><span class="line">    |-- lua</span><br><span class="line">        |-- bin</span><br><span class="line">            |-- lua.exe</span><br><span class="line">            |-- luarocks.exe</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- doc</span><br><span class="line">            |-- readme.html</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- include</span><br><span class="line">            |-- lua.h</span><br><span class="line">            |-- ...</span><br><span class="line">    |-- build.cmd</span><br></pre></td></tr></table></figure></li><li>验证 LuaRocks 环境<br>重新打开 <code>CMD</code> ，输入 <code>luarocks --version</code>，如果正确显示版本则安装成功。</li><li>新建 LuaRocks 用户配置文件夹<br>在 <code>C:\Users\kanri\AppData\Roaming</code> 目录下新建 <code>luarocks</code> 文件夹<br>其中 <code>kanri</code> 为你的用户名</li><li>配置 LuaRocks 使用的 Lua 环境<br><code>CMD</code> 内输入 <code>luarocks --lua-dir &quot;lua-5.4.3\lua&quot;</code><br>其中， <code>lua-5.4.3\lua</code> 为 Lua 环境的绝对路径</li><li>配置 LuaRocks 的 INCDIR 目录<br><code>CMD</code> 内输入 <code>luarocks config variables.LUA_INCDIR &quot;lua-5.4.3\lua\include&quot;</code><br>其中， <code>lua-5.4.3\lua</code> 为 Lua 环境的绝对路径</li><li>验证 LuaRocks 的配置<br><code>CMD</code> 内输入 <code>luarocks</code><br>下面为博主的配置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Configuration:</span><br><span class="line">   Lua:</span><br><span class="line">      Version    : 5.3</span><br><span class="line">      Interpreter: E:\lua-5.4.3\lua\bin/lua.exe (ok)</span><br><span class="line">      LUA_DIR    : E:\lua-5.4.3\lua (ok)</span><br><span class="line">      LUA_BINDIR : E:\lua-5.4.3\lua\bin (ok)</span><br><span class="line">      LUA_INCDIR : E:\lua-5.4.3\lua/include (ok)</span><br><span class="line">      LUA_LIBDIR : E:\lua-5.4.3\lua/bin (ok)</span><br><span class="line"></span><br><span class="line">   Configuration files:</span><br><span class="line">      System  : C:/Program Files/luarocks/config-5.3.lua (not found)</span><br><span class="line">      User    : C:/Users/kanri/AppData/Roaming/luarocks/config-5.3.lua (ok)</span><br><span class="line"></span><br><span class="line">   Rocks trees in use:</span><br><span class="line">      C:\Users\kanri\AppData\Roaming/luarocks (&quot;user&quot;)</span><br></pre></td></tr></table></figure></li><li>配置 LuaRocks 依赖的环境变量<br><code>CMD</code> 内输入 <code>luarocks path --bin</code> ，将路径添加到环境变量中<br>注意 <code>CMD</code> 内使用 <code>SET</code> 命令配置的环境变量只适用于当前 <code>CMD</code> 窗口</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鉴于网上对安装过程陈述过于模糊，本篇博文主要详细讲述 LuaRocks(version 3.7.0) 搭配 Lua(version 3.3.6) ，在 Windows 环境下的安装。&lt;/p&gt;
&lt;h3 id=&quot;LuaRocks&quot;&gt;&lt;a href=&quot;#LuaRocks&quot; cla</summary>
      
    
    
    
    
    <category term="Lua" scheme="https://blog.kanri.top/tags/Lua/"/>
    
    <category term="LuaRocks" scheme="https://blog.kanri.top/tags/LuaRocks/"/>
    
  </entry>
  
  <entry>
    <title>springboot连接phoenix的几种方法</title>
    <link href="https://blog.kanri.top/2021/07/15/springboot%E8%BF%9E%E6%8E%A5phoenix%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.kanri.top/2021/07/15/springboot%E8%BF%9E%E6%8E%A5phoenix%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-15T06:23:48.000Z</published>
    <updated>2021-07-15T07:25:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽说是介绍<code>springboot</code>连接phoenix的方法，其实因为用的是<code>jdbc</code>连接方式，其实只要是通过<code>jdbc</code>方式连接的数据库都可以通用，比如 <code>hive</code>。</p><h3 id="1-原生方法连接数据库"><a href="#1-原生方法连接数据库" class="headerlink" title="1.原生方法连接数据库"></a>1.原生方法连接数据库</h3><p>自己手写 <code>Connection</code> ，<code>Statement</code>，<code>PreparedStatement</code>，<code>ResultSet</code>，手写数据库连接和关闭，自己提交sql语句。</p><p>这种方法是最开始学习数据库连接的方法，后面连接数据库的方法都是在这样的基础上进行了封装和扩充。优点是能够了解数据库连接过程，但是缺陷更加明显，比如何时建立连接何时关闭，是否自动提交，还要自己维护线程池，非常麻烦。但是假如你需要在项目中<code>动态连接</code>多个数据库，大概就要采用这种方式了。除此之外，不建议采用这种纯原生的连接方式。</p><p>示例：<a href="https://github.com/gitriver/alad-phoenix">https://github.com/gitriver/alad-phoenix</a>    想学习这种方法的可以看看这个。</p><h3 id="2-JdbcTemplate"><a href="#2-JdbcTemplate" class="headerlink" title="2.JdbcTemplate"></a>2.JdbcTemplate</h3><p>通过配置类中加载<code>DataSource</code>、<code>JdbcTemplate</code>来操作<code>phoenix</code>，实际上<code>JdbcTemplate</code>是<code>spring</code>对方法（1）的封装，但是可以省事，何乐而不为呢？</p><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoenixDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;phoenixJdbcDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;phoenixJdbcDataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(env.getProperty(<span class="string">&quot;phoenix.url&quot;</span>));</span><br><span class="line">        dataSource.setDriverClassName(env.getProperty(<span class="string">&quot;phoenix.driver-class-name&quot;</span>));</span><br><span class="line">        dataSource.setUsername(env.getProperty(<span class="string">&quot;phoenix.username&quot;</span>));<span class="comment">//phoenix的用户名默认为空</span></span><br><span class="line">        dataSource.setPassword(env.getProperty(<span class="string">&quot;phoenix.password&quot;</span>));<span class="comment">//phoenix的密码默认为空</span></span><br><span class="line">        dataSource.setDefaultAutoCommit(Boolean.valueOf(env.getProperty(<span class="string">&quot;phoenix.default-auto-commit&quot;</span>)));</span><br><span class="line">        dataSource.setConnectionProperties(<span class="string">&quot;phoenix.schema.isNamespaceMappingEnabled=true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;phoenixJdbcTemplate&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">phoenixJdbcTemplate</span><span class="params">(<span class="meta">@Qualifier(&quot;phoenixJdbcDataSource&quot;)</span> DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CRUDServiceImp</span> <span class="keyword">implements</span> <span class="title">CRUDService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;phoenixJdbcTemplate&quot;)</span></span><br><span class="line">    JdbcTemplate phoenixJdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        phoenixJdbcTemplate.update(<span class="string">&quot;upsert into data_provision.company(id,name,address) values(&#x27;20&#x27;,&#x27;xuxiao&#x27;,&#x27;德国柏林&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,<span class="string">&quot;数据添加成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = phoenixJdbcTemplate.update(<span class="string">&quot;upsert into data_provision.company(id,name) values(&#x27;20&#x27;,&#x27;yyggg&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,<span class="string">&quot;数据更新成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        phoenixJdbcTemplate.update(<span class="string">&quot;delete from data_provision.company where id =&#x27;20&#x27;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,<span class="string">&quot;数据删除成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; query()&#123;</span><br><span class="line">        <span class="keyword">return</span> phoenixJdbcTemplate.queryForList(<span class="string">&quot;select * from data_provision.company&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; tSql(String sql)&#123;</span><br><span class="line">        <span class="keyword">return</span> phoenixJdbcTemplate.queryForList(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateSql</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phoenixJdbcTemplate.update(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优点：方便，代码量不大。通过这种方式不需要实现dao层，假如不需要映射到实体类的话可以说是上选。</p><p>缺点：由于没有orm，所以想直接将数据库映射到实体类是做不到的。当然，你要自己实现也未尝不可，但是为什么要自己造轮子呢？</p><p><a href="https://www.cnblogs.com/bener/p/10617065.html">JdbcTemplate实体映射</a></p><p>示例：<a href="https://github.com/Gyoliu/phoenix-hbase">https://github.com/Gyoliu/phoenix-hbase</a></p><p>###3.orm框架</p><p>通过现有的<code>orm</code>框架来进行连接，<code>hibernate</code>和<code>mybatis</code>都可以。</p><p><code>hibernate</code>能够通过数据库类型来将hql语句转变成对应数据库的方言。虽然<code>hibernate</code>没有<code>phoenix</code>的方言，不过在github上有人制作了。我没试过，希望尝试过的人能和我分享一下使用心得。</p><p><a href="https://github.com/jruesga/phoenix-hibernate-dialect">https://github.com/jruesga/phoenix-hibernate-dialect</a>  （hibernate的phoenix方言制作）</p><p><code>mybatis</code>，通过<code>jdbc</code>连接到<code>phoenix</code>，指定<code>phoenix</code>的驱动jar，就可以连接到了。<code>jdbc</code>连接既可以是<code>zookeeper</code>的地址( jdbc:phoenix:zookeeper )，也可以是<code>phoenix</code>的thin-connect( jdbc:phoenix:thin:url )。在使用轻连接之前需要先打开phoenix的轻连接。</p><p>通过<code>mybatis</code>连接不能指定数据库，连接的是默认数据库。所以在指定数据表的时候需要加上数据库，如（db.table）。也可以通过mybatis-plus的@TableName注解来指定数据表（如@TableName(“DEV.TEST”)），假如需要小写的话可以用双引号限定小写（如@TableName(“\“dev.test2\“”)）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">datasource:</span><br><span class="line">    #数据库连接信息</span><br><span class="line">    url: jdbc:phoenix:slaver01-robin,slaver02-robin,master-robin:2181</span><br><span class="line">    username:</span><br><span class="line">    password:</span><br><span class="line">    driver-class-name: org.apache.phoenix.jdbc.PhoenixDriver     #驱动</span><br><span class="line">    # 如果不想配置对数据库连接池做特殊配置的话,以下关于连接池的配置就不是必须的</span><br><span class="line">    # spring-boot 2.X 默认采用高性能的 Hikari 作为连接池 更多配置可以参考 https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby</span><br><span class="line">    type: com.zaxxer.hikari.HikariDataSource</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例：<a href="https://gitee.com/zhengshunzi/springboot-phoenix">https://gitee.com/zhengshunzi/springboot-phoenix</a></p><p><a href="https://github.com/mlwise/springboot-mybatis-phoenix-demo">https://github.com/mlwise/springboot-mybatis-phoenix-demo</a></p><p>优点和缺点都是<code>orm</code>框架自身的缺点，毕竟是可以商用的框架，在简单、易用、稳定、可移植性上比原生代码强太多了。在连接方式上可以说是最好的选择了。</p><ul><li>  连接异常</li></ul><p>1.客户端命名空间映射未启用</p><p>具体报错为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: ERROR 726 (43M10):  Inconsistent namespace mapping properties. Cannot initiate connection as SYSTEM:CATALOG is found but client does not have phoenix.schema.isNamespaceMappingEnabled enabled</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>单看字面意思是说你的<code>hbase</code>配置中没有以下配置，很多博客也说是这个原因，确实也有可能，不过我看网上博客在分享如何安装<code>phoenix</code>的时候，没有一篇会把这个配置给漏掉，所以我认为因为<code>hbase</code>配置问题才连不上的是少数中的少数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;phoenix.schema.isNamespaceMappingEnabled&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面报错说是客户端没有将<code>phoenix.schema.isNamespaceMappingEnabled</code>设置为true。这里的客户端，指的是你的springboot项目,而不是hbase的客户端配置。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2adc027b056e80091f2687eb32e39175997.png"></p><p>假如你用的是<code>cdh</code> <code>hadoop</code>，在CM平台上把客户端高级配置加上命名空间映射是没用的。正确的解决办法有两种：</p><p>1）在连接池的配置中把<code>phoenix.schema.isNamespaceMappingEnabled</code>设置为true</p><p>这个操作可以在配置文件中完成，也可以在手动加载配置类中完成。但是通过这种方式，你的连接池必须为<code>Druid</code>而不是Springboot2默认的<code>Hikari</code>。</p><p>在<code>application.properties</code>中增加配置：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.connectionProperties=phoenix.schema.isNamespaceMappingEnabled=true</span><br></pre></td></tr></table></figure><p>或，手动加载配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;phoenixJdbcDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;phoenixJdbcDataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(env.getProperty(<span class="string">&quot;phoenix.url&quot;</span>));</span><br><span class="line">        dataSource.setDriverClassName(env.getProperty(<span class="string">&quot;phoenix.driver-class-name&quot;</span>));</span><br><span class="line">        dataSource.setUsername(env.getProperty(<span class="string">&quot;phoenix.username&quot;</span>));<span class="comment">//phoenix的用户名默认为空</span></span><br><span class="line">        dataSource.setPassword(env.getProperty(<span class="string">&quot;phoenix.password&quot;</span>));<span class="comment">//phoenix的密码默认为空</span></span><br><span class="line">        dataSource.setDefaultAutoCommit(Boolean.valueOf(env.getProperty(<span class="string">&quot;phoenix.default-auto-commit&quot;</span>)));</span><br><span class="line">        dataSource.setConnectionProperties(<span class="string">&quot;phoenix.schema.isNamespaceMappingEnabled=true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># phoenix 数据源自定义配置</span><br><span class="line">phoenix.enable= true</span><br><span class="line">phoenix.url=jdbc:phoenix:192.168.49.180,192.168.49.181:2181</span><br><span class="line">phoenix.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">phoenix.driver-class-name=org.apache.phoenix.jdbc.PhoenixDriver</span><br><span class="line">phoenix.username=</span><br><span class="line">phoenix.password=</span><br><span class="line">phoenix.default-auto-commit=true</span><br><span class="line">phoenix.schema.isNamespaceMappingEnabled=true</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）在配置文件中新增一个<code>hbase-site.xml</code>，在这里加载配置（推荐）</p><p><img src="https://oscimg.oschina.net/oscnet/up-0a9ba4a5b9e33223bf3a636d3d09b3374b5.png"></p><p>只需要加载这一个配置就可以了，没有必要和<code>hbase</code>的同步。这样也能用<code>Hikari</code>连接池。</p><p>另外附一个不那么正经的解决办法，就是通过<code>phoenix</code>的轻连接来连接<code>phoenix</code>，不会报命名空间映射未启用的错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:phoenix:thin:url=http://phoenix:8765;serialization=PROTOBUF</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://2.com/google/protobuf/LiteralByteString%E7%B1%BB%E9%97%AE%E9%A2%98">2.com/google/protobuf/LiteralByteString类问题</a></p><p>这个问题大概只有我自己遇到了…不过也写给大家分享一下。最开始报错是java.lang.NoClassDefFoundError: com/google/protobuf/LiteralByteString，没有找到这个类。我选择通过idea寻找maven添加，就是这一步让我上了大当。idea给我的搜索结果是：</p><p><img src="https://oscimg.oschina.net/oscnet/up-d694766e637a5d73ae1865c844890f8a9fc.png"></p><p>添加org.apache.hive:hive-exec:3.1.0。看上去没什么问题，添加上去之后也能找到这个类，但是运行起来报了另外一个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VerifyError: class com.google.protobuf.LiteralByteString overrides final met</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体报错找不到了，大概意思是说类型转换错误。</p><p>思考了很久，通过idea的Dependency Analyzer对比jar包，才发现网上能够正常运行的项目，com.google.protobuf：protobuf-java这个包是2.5.0版本，而我的则是3.1.0。在pom中指定版本之后，错误就消失了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽说是介绍&lt;code&gt;springboot&lt;/code&gt;连接phoenix的方法，其实因为用的是&lt;code&gt;jdbc&lt;/code&gt;连接方式，其实只要是通过&lt;code&gt;jdbc&lt;/code&gt;方式连接的数据库都可以通用，比如 &lt;code&gt;hive&lt;/code&gt;。&lt;/p&gt;
&lt;h3</summary>
      
    
    
    
    
    <category term="springboot" scheme="https://blog.kanri.top/tags/springboot/"/>
    
    <category term="phoenix" scheme="https://blog.kanri.top/tags/phoenix/"/>
    
    <category term="mybatis" scheme="https://blog.kanri.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>CGO 类型转换</title>
    <link href="https://blog.kanri.top/2021/07/14/CGO-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://blog.kanri.top/2021/07/14/CGO-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-07-14T14:11:16.000Z</published>
    <updated>2022-01-11T08:28:57.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本数值类型"><a href="#基本数值类型" class="headerlink" title="基本数值类型"></a>基本数值类型</h3><ul><li><p><code>Go</code> 的基本数值类型内存模型和 <code>C</code> 一样，传递数值类型时可以直接将 <code>Go</code> 的基本数值类型转换成对应的 <code>CGO</code> 类型然后传递给 <code>C</code> 函数调用。</p></li><li><p><code>Go</code> 和 <code>C</code> 的基本数值类型转换对照表如下:</p><table><thead><tr><th align="left">C语言类型</th><th align="left">CGO类型</th><th align="left">Go语言类型</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">C.char</td><td align="left">byte</td></tr><tr><td align="left">singed char</td><td align="left">C.schar</td><td align="left">int8</td></tr><tr><td align="left">unsigned char</td><td align="left">C.uchar</td><td align="left">uint8</td></tr><tr><td align="left">short</td><td align="left">C.short</td><td align="left">int16</td></tr><tr><td align="left">unsigned short</td><td align="left">C.ushort</td><td align="left">uint16</td></tr><tr><td align="left">int</td><td align="left">C.int</td><td align="left">int32</td></tr><tr><td align="left">unsigned int</td><td align="left">C.uint</td><td align="left">uint32</td></tr><tr><td align="left">long</td><td align="left">C.long</td><td align="left">int32</td></tr><tr><td align="left">unsigned long</td><td align="left">C.ulong</td><td align="left">uint32</td></tr><tr><td align="left">long long int</td><td align="left">C.longlong</td><td align="left">int64</td></tr><tr><td align="left">unsigned long long int</td><td align="left">C.ulonglong</td><td align="left">uint64</td></tr><tr><td align="left">float</td><td align="left">C.float</td><td align="left">float32</td></tr><tr><td align="left">double</td><td align="left">C.double</td><td align="left">float64</td></tr><tr><td align="left">size_t</td><td align="left">C.size_t</td><td align="left">uint</td></tr></tbody></table></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>使用 <code>&quot;C&quot;</code> 提供的 <code>C.CString()</code> 将 <code>Go</code> 的字符串转换成 <code>C</code> char * 然后传递给 <code>C</code> 函数调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void hello(char *str) &#123;</span></span><br><span class="line"><span class="comment">printf(str);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;unsafe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cstr := C.CString(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">C.hello(cstr)</span><br><span class="line">C.free(unsafe.Pointer(cstr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>C.CString()</code> 返回的 <code>C</code> 字符串是在堆上新创建的并且不受 Go 的 GC 的管理，使用完后需要自行调用 <code>C.free()</code>，否则会造成内存泄露。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本数值类型&quot;&gt;&lt;a href=&quot;#基本数值类型&quot; class=&quot;headerlink&quot; title=&quot;基本数值类型&quot;&gt;&lt;/a&gt;基本数值类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Go&lt;/code&gt; 的基本数值类型内存模型和 &lt;code&gt;C&lt;/code&gt; 一</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://blog.kanri.top/tags/Golang/"/>
    
    <category term="C" scheme="https://blog.kanri.top/tags/C/"/>
    
    <category term="CGO" scheme="https://blog.kanri.top/tags/CGO/"/>
    
  </entry>
  
  <entry>
    <title>CGO Go 与 C 的互相调用</title>
    <link href="https://blog.kanri.top/2021/07/13/CGO-Go-%E4%B8%8E-C-%E7%9A%84%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8/"/>
    <id>https://blog.kanri.top/2021/07/13/CGO-Go-%E4%B8%8E-C-%E7%9A%84%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8/</id>
    <published>2021-07-13T13:47:32.000Z</published>
    <updated>2022-01-11T08:28:57.519Z</updated>
    
    <content type="html"><![CDATA[<p><code>CGO</code> 提供了 <code>Golang</code> 和 <code>C</code> 相互调用的机制。通过 <code>CGO</code> 技术我们可以在 <code>Go</code> 中调用 <code>C</code> 函数，也可以将 <code>Go</code> 函数导出为 <code>C</code> 函数。</p><h3 id="Go-调用-C-函数"><a href="#Go-调用-C-函数" class="headerlink" title="Go 调用 C 函数"></a>Go 调用 C 函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int add(int a, int b) &#123;</span></span><br><span class="line"><span class="comment">    return a + b;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">c := <span class="keyword">int</span>(C.add(C.<span class="keyword">int</span>(a), C.<span class="keyword">int</span>(b)))</span><br><span class="line">fmt.Println(c) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上述代码中的 <code>import C</code> ， <code>&quot;C&quot;</code> 是一个伪包，在 <code>Go</code> 的标准库中并不存在 <code>&quot;C&quot;</code> 包， <code>CGO</code> 通过这个查找到对应引用 <code>C</code> 命名空间的。</li></ul><h3 id="C-调用-Go-函数"><a href="#C-调用-Go-函数" class="headerlink" title="C 调用 Go 函数"></a>C 调用 Go 函数</h3><p><code>main.go</code> 文件，<code>main</code> 函数中调用 <code>add.h</code> 文件中的 <code>C.test</code> 函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &lt;add.h&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">C.test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add.go</code> 文件，定义并导出了 <code>Add</code> 函数，提供给 <code>add.h</code> 文件调用。其中 <code>//export Add</code> 是导出 <code>Add</code> 为 <code>C</code> 函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//export Add</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b C.<span class="keyword">int</span>)</span> <span class="title">C</span>.<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add.h</code> 文件，通过 <code>extern</code> 导入 <code>add.go</code> 文件定义的 <code>Add</code> 函数，并在 <code>C.test</code> 函数中调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用命令 <code>go build main.go add.go</code> 编译</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;CGO&lt;/code&gt; 提供了 &lt;code&gt;Golang&lt;/code&gt; 和 &lt;code&gt;C&lt;/code&gt; 相互调用的机制。通过 &lt;code&gt;CGO&lt;/code&gt; 技术我们可以在 &lt;code&gt;Go&lt;/code&gt; 中调用 &lt;code&gt;C&lt;/code&gt; 函数，也可以将 </summary>
      
    
    
    
    
    <category term="Golang" scheme="https://blog.kanri.top/tags/Golang/"/>
    
    <category term="C" scheme="https://blog.kanri.top/tags/C/"/>
    
    <category term="CGO" scheme="https://blog.kanri.top/tags/CGO/"/>
    
  </entry>
  
  <entry>
    <title>Go Windows 系统下隐藏 CMD 窗口</title>
    <link href="https://blog.kanri.top/2021/07/13/Go-Windows-%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%9A%90%E8%97%8F-CMD-%E7%AA%97%E5%8F%A3/"/>
    <id>https://blog.kanri.top/2021/07/13/Go-Windows-%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%9A%90%E8%97%8F-CMD-%E7%AA%97%E5%8F%A3/</id>
    <published>2021-07-13T09:28:42.000Z</published>
    <updated>2022-01-11T08:28:57.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="隐藏-Golang-自身运行窗口"><a href="#隐藏-Golang-自身运行窗口" class="headerlink" title="隐藏 Golang 自身运行窗口"></a>隐藏 Golang 自身运行窗口</h3><p>仅需在编译是增加 <code>-ldflags</code> 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -ldflags -H=windowsgui </span><br></pre></td></tr></table></figure><h3 id="隐藏-Golang-调用-CMD-窗口"><a href="#隐藏-Golang-调用-CMD-窗口" class="headerlink" title="隐藏 Golang 调用 CMD 窗口"></a>隐藏 Golang 调用 CMD 窗口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmd := exec.Command(<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> runtime.GOOS == <span class="string">&quot;windows&quot;</span> &#123;</span><br><span class="line">    cmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;HideWindow: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;隐藏-Golang-自身运行窗口&quot;&gt;&lt;a href=&quot;#隐藏-Golang-自身运行窗口&quot; class=&quot;headerlink&quot; title=&quot;隐藏 Golang 自身运行窗口&quot;&gt;&lt;/a&gt;隐藏 Golang 自身运行窗口&lt;/h3&gt;&lt;p&gt;仅需在编译是增加 &lt;code</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://blog.kanri.top/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket 协议</title>
    <link href="https://blog.kanri.top/2021/06/26/WebSocket-%E5%8D%8F%E8%AE%AE/"/>
    <id>https://blog.kanri.top/2021/06/26/WebSocket-%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-06-25T23:20:07.000Z</published>
    <updated>2022-01-16T05:53:54.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><h3 id="连接握手"><a href="#连接握手" class="headerlink" title="连接握手"></a>连接握手</h3><p><code>WebSocket</code> 客户端发起基于 <code>HTTP</code> 握手的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8000</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Origin: http://127.0.0.1:8000</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Sec-WebSocket-Key: Bt4+Nfq12qxyxHslV2iFFg==</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure><p><code>WebSocket</code> 服务端响应握手的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Sec-WebSocket-Accept: MK6YmuGMF81B+0zEjhayzUlnqxg=</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Upgrade: websocket</span><br></pre></td></tr></table></figure><h3 id="基础帧协议"><a href="#基础帧协议" class="headerlink" title="基础帧协议"></a>基础帧协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class="line">|N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class="line">| |1|2|3|       |K|             |                               |</span><br><span class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class="line">|     Extended payload length continued, if payload len == 127  |</span><br><span class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class="line">|                               |Masking-key, if MASK set to 1  |</span><br><span class="line">+-------------------------------+-------------------------------+</span><br><span class="line">| Masking-key (continued)       |          Payload Data         |</span><br><span class="line">+-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class="line">:                     Payload Data continued ...                :</span><br><span class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class="line">|                     Payload Data continued ...                |</span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>FIN: 1 bit<br>​值为1则表示最后的<code>frame</code>。</p></li><li><p>RSV1，RSV2，RSV3: 每个1 bit<br>必须设置为0，除非扩展了非0值含义的扩展。</p></li><li><p>Opcode: 4 bit<br><code>Payload data</code> 的操作码。</p><ul><li>%x0 表示一个持续帧</li><li>%x1 表示一个文本帧</li><li>%x2 表示一个二进制帧</li><li>%x3-7 预留给以后的非控制帧</li><li>%x8 表示一个连接关闭包</li><li>%x9 表示一个ping包</li><li>%xA 表示一个pong包</li><li>%xB-F 预留给以后的控制帧</li></ul></li><li><p>Mask: 1 bit<br>是否使用掩码。如果设置为1，那么掩码的键值存在于Masking-Key中。</p></li><li><p>Payload length: 7 bits, 7+16 bits, or 7+64 bits<br><code>Payload data</code> 长度</p></li><li><p>Masking-Key: 0 or 4 bytes<br>发送的数据与同一帧中的掩码进行过了运算，用于解码 <code>Payload data</code><br>运算公式为：payload[i] = origin_data[i] ^ masking_key[i%4] 。</p></li><li><p>Payload data: (x+y) bytes<br><code>Payload data</code> 包括 <code>Extension data</code> 和 <code>Application data</code>。</p></li></ul><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>为了使用一个状态码关闭websocket，一端必须发送一个关闭的控制帧，当两端都发送了关闭数据帧时，双方都要关闭所有的连接资源。控制帧为一个“状态码”和一个“原因说明”，当关闭之后，双方处于CLOSED状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;WebSocket&quot;&gt;&lt;a href=&quot;#WebSocket&quot; class=&quot;headerlink&quot; title=&quot;WebSocket&quot;&gt;&lt;/a&gt;WebSocket&lt;/h3&gt;&lt;p&gt;WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通</summary>
      
    
    
    
    
    <category term="HTTP" scheme="https://blog.kanri.top/tags/HTTP/"/>
    
    <category term="WebSocket" scheme="https://blog.kanri.top/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Go http 标准库的 SNI 修改</title>
    <link href="https://blog.kanri.top/2021/06/21/Go-http-%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84-SNI-%E4%BF%AE%E6%94%B9/"/>
    <id>https://blog.kanri.top/2021/06/21/Go-http-%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84-SNI-%E4%BF%AE%E6%94%B9/</id>
    <published>2021-06-20T23:20:07.000Z</published>
    <updated>2022-01-11T08:28:57.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SNI-阻断"><a href="#SNI-阻断" class="headerlink" title="SNI 阻断"></a>SNI 阻断</h3><p>SNI (Server Name Indication)，为 <code>TLS</code> 连接中客户端发起的第一个握手包 <code>Client Hello</code> 中的即将访问的域名信息数据的字段。该字段是为了解决某些服务器同时含有多个域名站点，在加密传输之前，它需要知道客户端访问的是哪个域名。因此某些防火墙能对报文中的 <code>SNI</code> 识别并进行阻断。</p><h3 id="SNI-修改"><a href="#SNI-修改" class="headerlink" title="SNI 修改"></a>SNI 修改</h3><p>本文以 <code>P站 (https://pixiv.net)</code> 为例，示例如何修改 <code>Go http 标准库</code> 请求中的 <code>SNI</code> 字段数据。造成 P站 无法访问的原因有两方面，一方面是 <code>DNS</code> 污染，本文不多加叙述，另一个则为 <code>SNI</code> 阻断。因为 P站 服务器无需 <code>SNI</code> 字段即可正常访问，因此我们可以通过修改其 <code>SNI</code> 字段的值防止 <code>TLS</code> 连接被阻断。</p><p>通过 <code>WireShark</code> 抓包能看见 <code>Server Name</code> 字段的值为 <code>pixiv.net</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Extension: server_name (len=14)</span><br><span class="line">    Type: server_name (0)</span><br><span class="line">    Length: 14</span><br><span class="line">    Server Name Indication extension</span><br><span class="line">        Server Name list length: 12</span><br><span class="line">        Server Name Type: host_name (0)</span><br><span class="line">        Server Name length: 9</span><br><span class="line">        Server Name: pixiv.net</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Golang http 标准库实现 SNI 隐藏</p><ul><li><code>ServerName</code> 即 <code>SNI</code> 中的 <code>Server Name</code></li><li><code>InsecureSkipVerify</code> 跳过证书校验</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">client := &amp;http.Client&#123;</span><br><span class="line">    Transport: &amp;http.Transport&#123;</span><br><span class="line">        <span class="comment">// 隐藏 SNI</span></span><br><span class="line">        TLSClientConfig: &amp;tls.Config&#123;</span><br><span class="line">            ServerName:         <span class="string">&quot;-&quot;</span>,</span><br><span class="line">            InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 更改 IP</span></span><br><span class="line">        Dial: <span class="function"><span class="keyword">func</span><span class="params">(network, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line">            <span class="keyword">return</span> net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;210.140.131.223:443&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后从抓包数据可以看见， <code>Server Name</code> 字段的值变为了 <code>-</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Extension: server_name (len=6)</span><br><span class="line">    Type: server_name (0)</span><br><span class="line">    Length: 6</span><br><span class="line">    Server Name Indication extension</span><br><span class="line">        Server Name list length: 4</span><br><span class="line">        Server Name Type: host_name (0)</span><br><span class="line">        Server Name length: 1</span><br><span class="line">        Server Name: -</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SNI-阻断&quot;&gt;&lt;a href=&quot;#SNI-阻断&quot; class=&quot;headerlink&quot; title=&quot;SNI 阻断&quot;&gt;&lt;/a&gt;SNI 阻断&lt;/h3&gt;&lt;p&gt;SNI (Server Name Indication)，为 &lt;code&gt;TLS&lt;/code&gt; 连接中客户端</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://blog.kanri.top/tags/Golang/"/>
    
    <category term="HTTP" scheme="https://blog.kanri.top/tags/HTTP/"/>
    
    <category term="SNI" scheme="https://blog.kanri.top/tags/SNI/"/>
    
  </entry>
  
</feed>
